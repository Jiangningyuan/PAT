#include <stdio.h>
#include <algorithm>
#include <queue>
#include <iostream>
using namespace std;
int flag=0,k,n;
struct Node
{
	Node *lchild;
	Node *rchild;
	int data,layer;
};
Node* newnode(int v)
{
    Node *node=new Node;
	node->data=v;	
    if(v<0)
        node->layer=0;
    else
        node->layer=1;
    node->lchild=node->rchild=NULL;
    return node;
}
int getH(Node *root)
{
	if(root==NULL)
	   return 0;
	return root->layer;
}
void updateH(Node *root)
{
	if(root->data>0)
    	root->layer=max(getH(root->lchild),getH(root->rchild))+1;
    else
        	root->layer=max(getH(root->lchild),getH(root->rchild));
}
int getB(Node *root)
{
	return getH(root->lchild)-getH(root->rchild);
}
void insert(Node *&root,int v)
{
	if(root==NULL)
	{
		root=newnode(v);
		return;
	}
	if(abs(v)<=abs(root->data))
	{
		insert(root->lchild,v);
		updateH(root->lchild);
		updateH(root);
	}
	else if(abs(v)>abs(root->data))
	{
		insert(root->rchild,v);
		updateH(root->rchild);
		updateH(root);
	}
}
void BFS(Node *root)
{
	queue<Node*> q;
	q.push(root);
	while(!q.empty())
	{
		Node *top=q.front();
		q.pop();
		if(top->data<0)
			if((top->lchild!=NULL&&top->lchild->data<0)||(top->rchild!=NULL&&top->rchild->data<0))
			          flag=1;
		if(getB(top)!=0)
		     flag=1;
		if(top->lchild!=NULL)
		    q.push(top->lchild);
		if(top->rchild!=NULL)
		    q.push(top->rchild);
	}
}
int main()
{
	scanf("%d",&k);
	for(int pp=0;pp<k;pp++)
	{
		Node *root=NULL;
		flag=0;
		scanf("%d",&n);
		for(int i=0;i<n;i++)
		{
			int a;
			scanf("%d",&a);
			insert(root,a);
		}
		BFS(root);
		if(root->data<0)
		    flag=1;
		if(flag==1)
		    printf("No\n");
		else
		    printf("Yes\n");
	}
	return 0;
}
